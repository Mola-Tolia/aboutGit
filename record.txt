git init 初始化文件夹为git可管理的文件夹
git add . 将文件夹下的所有文件的当前状态都存到暂存区中（不包括删除文件的操作）
git add --all 将文件夹下的所有文件的当前状态都存到暂存区中（包括删除文件的操作）
git commit -m "本次提交的描述" 将暂存区中的内容提交到本地仓库中
git commit -a 直接将文件夹下所有文件的当前转态全部提交到本地仓库中
git log 查看提交日志
git log 文件名 查看单个文件可回滚版本
git status 查看提交之后文件是否做了改动
git reset --hard HEAD^ 将本地仓库中的版本回滚至上一版本（若是HEAD~2，则是回滚2个版本）,并且清空暂存区和将工作目录的内容也回滚
git reset --soft HEAD^ 仅将本地仓库中的版本回滚至上一版本，工作目录内容不变，且将工作目录中与上一版本的差异集放入暂存区中
git reset --mixed HEAD^ 将本地仓库中的版本回滚至上一版本，且清空暂存区，但工作目录内容不变
git checkout -- 文件名 将该文件恢复至最近一次提交的状态
git reset 文件可回滚的版本id 文件名 将文件回滚至指定版本
git reflog 查看提交历史，包括回滚的操作
git rm 文件名 删除文件
git checkout -b 分支名 创建分支并切换到该分支
git checkout 分支名 切换分支
git branch 查看分支指向
git branch -a 查看当前所有分支
git merge 分支名 将分支合并到当前分支中
git branch -D 分支名 删除本地分支
git push origin --delete 远程分支名 删除远程分支
git clone 远程仓库地址 将远程仓库的代码下载找到当前目录下，注意不要使用git init
git clone -b 分支名 远程仓库地址 拉取远程仓库指定分支
git push origin master
git branch -m 分支名 新的分支名 修改分支名
git stash 保存当前分支的工作状态（当当前分支修改后未提交时，且想切换分支时使用）
git stash list 查看当前存储了多少工作状态
git stash pop 当在别的分支做完事情之后，在切换回刚刚的分支，然后在刚刚的分支中将状态恢复
git cherry-pick 分支名 将分支的代码合并到当前分支中 ******************************************待确认
git fetch 拉取远程所有分支
git fetch 分支名 拉取远程指定分支
git remote 查看仓库信息
git remote -v 查看仓库信息，可以查看更详细的权限信息
git remote add origin 远程仓库地址 连接远程仓库

git restore [file] 将不在暂存区的文件撤销更改
git restore --staged [file] 将提交到暂存区的文件恢复到工作区